const bristol = `
154 218
2 32 32
1 32
2 1 31 63 64 AND
2 1 30 62 65 XOR
2 1 30 62 66 AND
2 1 65 64 67 AND
2 1 66 67 68 XOR
2 1 29 61 69 XOR
2 1 29 61 70 AND
2 1 69 68 71 AND
2 1 70 71 72 XOR
2 1 28 60 73 XOR
2 1 28 60 74 AND
2 1 73 72 75 AND
2 1 74 75 76 XOR
2 1 27 59 77 XOR
2 1 27 59 78 AND
2 1 77 76 79 AND
2 1 78 79 80 XOR
2 1 26 58 81 XOR
2 1 26 58 82 AND
2 1 81 80 83 AND
2 1 82 83 84 XOR
2 1 25 57 85 XOR
2 1 25 57 86 AND
2 1 85 84 87 AND
2 1 86 87 88 XOR
2 1 24 56 89 XOR
2 1 24 56 90 AND
2 1 89 88 91 AND
2 1 90 91 92 XOR
2 1 23 55 93 XOR
2 1 23 55 94 AND
2 1 93 92 95 AND
2 1 94 95 96 XOR
2 1 22 54 97 XOR
2 1 22 54 98 AND
2 1 97 96 99 AND
2 1 98 99 100 XOR
2 1 21 53 101 XOR
2 1 21 53 102 AND
2 1 101 100 103 AND
2 1 102 103 104 XOR
2 1 20 52 105 XOR
2 1 20 52 106 AND
2 1 105 104 107 AND
2 1 106 107 108 XOR
2 1 19 51 109 XOR
2 1 19 51 110 AND
2 1 109 108 111 AND
2 1 110 111 112 XOR
2 1 18 50 113 XOR
2 1 18 50 114 AND
2 1 113 112 115 AND
2 1 114 115 116 XOR
2 1 17 49 117 XOR
2 1 17 49 118 AND
2 1 117 116 119 AND
2 1 118 119 120 XOR
2 1 16 48 121 XOR
2 1 16 48 122 AND
2 1 121 120 123 AND
2 1 122 123 124 XOR
2 1 15 47 125 XOR
2 1 15 47 126 AND
2 1 125 124 127 AND
2 1 126 127 128 XOR
2 1 14 46 129 XOR
2 1 14 46 130 AND
2 1 129 128 131 AND
2 1 130 131 132 XOR
2 1 13 45 133 XOR
2 1 13 45 134 AND
2 1 133 132 135 AND
2 1 134 135 136 XOR
2 1 12 44 137 XOR
2 1 12 44 138 AND
2 1 137 136 139 AND
2 1 138 139 140 XOR
2 1 11 43 141 XOR
2 1 11 43 142 AND
2 1 141 140 143 AND
2 1 142 143 144 XOR
2 1 10 42 145 XOR
2 1 10 42 146 AND
2 1 145 144 147 AND
2 1 146 147 148 XOR
2 1 9 41 149 XOR
2 1 9 41 150 AND
2 1 149 148 151 AND
2 1 150 151 152 XOR
2 1 8 40 153 XOR
2 1 8 40 154 AND
2 1 153 152 155 AND
2 1 154 155 156 XOR
2 1 7 39 157 XOR
2 1 7 39 158 AND
2 1 157 156 159 AND
2 1 158 159 160 XOR
2 1 6 38 161 XOR
2 1 6 38 162 AND
2 1 161 160 163 AND
2 1 162 163 164 XOR
2 1 5 37 165 XOR
2 1 5 37 166 AND
2 1 165 164 167 AND
2 1 166 167 168 XOR
2 1 4 36 169 XOR
2 1 4 36 170 AND
2 1 169 168 171 AND
2 1 170 171 172 XOR
2 1 3 35 173 XOR
2 1 3 35 174 AND
2 1 173 172 175 AND
2 1 174 175 176 XOR
2 1 2 34 177 XOR
2 1 2 34 178 AND
2 1 177 176 179 AND
2 1 178 179 180 XOR
2 1 1 33 181 XOR
2 1 1 33 182 AND
2 1 181 180 183 AND
2 1 182 183 184 XOR
2 1 0 32 185 XOR
2 1 185 184 186 XOR
2 1 181 180 187 XOR
2 1 177 176 188 XOR
2 1 173 172 189 XOR
2 1 169 168 190 XOR
2 1 165 164 191 XOR
2 1 161 160 192 XOR
2 1 157 156 193 XOR
2 1 153 152 194 XOR
2 1 149 148 195 XOR
2 1 145 144 196 XOR
2 1 141 140 197 XOR
2 1 137 136 198 XOR
2 1 133 132 199 XOR
2 1 129 128 200 XOR
2 1 125 124 201 XOR
2 1 121 120 202 XOR
2 1 117 116 203 XOR
2 1 113 112 204 XOR
2 1 109 108 205 XOR
2 1 105 104 206 XOR
2 1 101 100 207 XOR
2 1 97 96 208 XOR
2 1 93 92 209 XOR
2 1 89 88 210 XOR
2 1 85 84 211 XOR
2 1 81 80 212 XOR
2 1 77 76 213 XOR
2 1 73 72 214 XOR
2 1 69 68 215 XOR
2 1 65 64 216 XOR
2 1 31 63 217 XOR`;

const bristol_optimized = `
184 248
2 32 32
1 32
2 1 31 63 64 AND
2 1 30 62 65 XOR
2 1 30 64 66 XOR
2 1 62 64 67 XOR
2 1 66 67 68 AND
2 1 64 68 69 XOR
2 1 29 61 70 XOR
2 1 29 69 71 XOR
2 1 61 69 72 XOR
2 1 71 72 73 AND
2 1 69 73 74 XOR
2 1 28 60 75 XOR
2 1 28 74 76 XOR
2 1 60 74 77 XOR
2 1 76 77 78 AND
2 1 74 78 79 XOR
2 1 27 59 80 XOR
2 1 27 79 81 XOR
2 1 59 79 82 XOR
2 1 81 82 83 AND
2 1 79 83 84 XOR
2 1 26 58 85 XOR
2 1 26 84 86 XOR
2 1 58 84 87 XOR
2 1 86 87 88 AND
2 1 84 88 89 XOR
2 1 25 57 90 XOR
2 1 25 89 91 XOR
2 1 57 89 92 XOR
2 1 91 92 93 AND
2 1 89 93 94 XOR
2 1 24 56 95 XOR
2 1 24 94 96 XOR
2 1 56 94 97 XOR
2 1 96 97 98 AND
2 1 94 98 99 XOR
2 1 23 55 100 XOR
2 1 23 99 101 XOR
2 1 55 99 102 XOR
2 1 101 102 103 AND
2 1 99 103 104 XOR
2 1 22 54 105 XOR
2 1 22 104 106 XOR
2 1 54 104 107 XOR
2 1 106 107 108 AND
2 1 104 108 109 XOR
2 1 21 53 110 XOR
2 1 21 109 111 XOR
2 1 53 109 112 XOR
2 1 111 112 113 AND
2 1 109 113 114 XOR
2 1 20 52 115 XOR
2 1 20 114 116 XOR
2 1 52 114 117 XOR
2 1 116 117 118 AND
2 1 114 118 119 XOR
2 1 19 51 120 XOR
2 1 19 119 121 XOR
2 1 51 119 122 XOR
2 1 121 122 123 AND
2 1 119 123 124 XOR
2 1 18 50 125 XOR
2 1 18 124 126 XOR
2 1 50 124 127 XOR
2 1 126 127 128 AND
2 1 124 128 129 XOR
2 1 17 49 130 XOR
2 1 17 129 131 XOR
2 1 49 129 132 XOR
2 1 131 132 133 AND
2 1 129 133 134 XOR
2 1 16 48 135 XOR
2 1 16 134 136 XOR
2 1 48 134 137 XOR
2 1 136 137 138 AND
2 1 134 138 139 XOR
2 1 15 47 140 XOR
2 1 15 139 141 XOR
2 1 47 139 142 XOR
2 1 141 142 143 AND
2 1 139 143 144 XOR
2 1 14 46 145 XOR
2 1 14 144 146 XOR
2 1 46 144 147 XOR
2 1 146 147 148 AND
2 1 144 148 149 XOR
2 1 13 45 150 XOR
2 1 13 149 151 XOR
2 1 45 149 152 XOR
2 1 151 152 153 AND
2 1 149 153 154 XOR
2 1 12 44 155 XOR
2 1 12 154 156 XOR
2 1 44 154 157 XOR
2 1 156 157 158 AND
2 1 154 158 159 XOR
2 1 11 43 160 XOR
2 1 11 159 161 XOR
2 1 43 159 162 XOR
2 1 161 162 163 AND
2 1 159 163 164 XOR
2 1 10 42 165 XOR
2 1 10 164 166 XOR
2 1 42 164 167 XOR
2 1 166 167 168 AND
2 1 164 168 169 XOR
2 1 9 41 170 XOR
2 1 9 169 171 XOR
2 1 41 169 172 XOR
2 1 171 172 173 AND
2 1 169 173 174 XOR
2 1 8 40 175 XOR
2 1 8 174 176 XOR
2 1 40 174 177 XOR
2 1 176 177 178 AND
2 1 174 178 179 XOR
2 1 7 39 180 XOR
2 1 7 179 181 XOR
2 1 39 179 182 XOR
2 1 181 182 183 AND
2 1 179 183 184 XOR
2 1 6 38 185 XOR
2 1 6 184 186 XOR
2 1 38 184 187 XOR
2 1 186 187 188 AND
2 1 184 188 189 XOR
2 1 5 37 190 XOR
2 1 5 189 191 XOR
2 1 37 189 192 XOR
2 1 191 192 193 AND
2 1 189 193 194 XOR
2 1 4 36 195 XOR
2 1 4 194 196 XOR
2 1 36 194 197 XOR
2 1 196 197 198 AND
2 1 194 198 199 XOR
2 1 3 35 200 XOR
2 1 3 199 201 XOR
2 1 35 199 202 XOR
2 1 201 202 203 AND
2 1 199 203 204 XOR
2 1 2 34 205 XOR
2 1 2 204 206 XOR
2 1 34 204 207 XOR
2 1 206 207 208 AND
2 1 204 208 209 XOR
2 1 1 33 210 XOR
2 1 1 209 211 XOR
2 1 33 209 212 XOR
2 1 211 212 213 AND
2 1 209 213 214 XOR
2 1 0 32 215 XOR
2 1 214 215 216 XOR
2 1 209 210 217 XOR
2 1 204 205 218 XOR
2 1 199 200 219 XOR
2 1 194 195 220 XOR
2 1 189 190 221 XOR
2 1 184 185 222 XOR
2 1 179 180 223 XOR
2 1 174 175 224 XOR
2 1 169 170 225 XOR
2 1 164 165 226 XOR
2 1 159 160 227 XOR
2 1 154 155 228 XOR
2 1 149 150 229 XOR
2 1 144 145 230 XOR
2 1 139 140 231 XOR
2 1 134 135 232 XOR
2 1 129 130 233 XOR
2 1 124 125 234 XOR
2 1 119 120 235 XOR
2 1 114 115 236 XOR
2 1 109 110 237 XOR
2 1 104 105 238 XOR
2 1 99 100 239 XOR
2 1 94 95 240 XOR
2 1 89 90 241 XOR
2 1 84 85 242 XOR
2 1 79 80 243 XOR
2 1 74 75 244 XOR
2 1 69 70 245 XOR
2 1 64 65 246 XOR
2 1 31 63 247 XOR`;


/*
 *  Parse circuit.
 */

const header = bristol/*_optimized*/.split('\n').map(e => e.split(' '));
const gates = header.splice(4);

let node_colors = gates.map(e => e[e.length-1]).map(
	e => ((e==='AND')?'#FF0000':((e==='LOR')?'#0000FF':((e==='XOR')?'#00FF00':'#FFFFFF')))
);


/*
 *  Build circuit graph from circuit gate list ("Bristol" format gate list).
 */

const circuit = {
	nodes: Object.keys(Array(Number(header[1][0]) + Number(header[1][1])).fill()).map(Number).map(
		i => (
			{i, is_gate: i < header[1][0], color: node_colors[i]}
		)
	),
	links: []
};

for (var i = gates.length-1; i >= 0; i--) {
	const gate = gates[i];
	if (gate[gate.length-1] === 'XOR') {
		circuit.links.push({ source: Number(header[1][0])+Number(gate[2]), target: i, color: '#00FF00' });
		circuit.links.push({ source: Number(header[1][0])+Number(gate[3]), target: i, color: '#00FF00' });
		circuit.links.push({ source: i,                                    target: Number(header[1][0])+Number(gate[4]), color: '#00FF00' });

	} else if (gate[gate.length-1] === 'AND') {
		circuit.links.push({ source: Number(header[1][0])+Number(gate[2]), target: i, color: '#FF0000' });
		circuit.links.push({ source: Number(header[1][0])+Number(gate[3]), target: i, color: '#FF0000' });
		circuit.links.push({ source: i,                                    target: Number(header[1][0])+Number(gate[4]), color: '#FF0000' });

	} else if (gate[gate.length-1] === 'LOR') {
		circuit.links.push({ source: Number(header[1][0])+Number(gate[2]), target: i, color: '#0000FF' });
		circuit.links.push({ source: Number(header[1][0])+Number(gate[3]), target: i, color: '#0000FF' });
		circuit.links.push({ source: i,                                    target: Number(header[1][0])+Number(gate[4]), color: '#0000FF' });

	} else if (gate[gate.length-1] === 'INV') {
		circuit.links.push({ source: Number(header[1][0])+Number(gate[2]), target: i, color: '#000000' });
		circuit.links.push({ source: i,                                    target: Number(header[1][0])+Number(gate[3]), color: '#000000' });
	}
}

export default circuit;
